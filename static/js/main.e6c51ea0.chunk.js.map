{"version":3,"sources":["components/Card.js","components/CardList.js","components/FilterBots.js","components/Loading.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robotFriends","map","user","i","key","FilterBots","searchChange","searchfield","for","type","placeholder","onChange","Loading","App","this","props","onRequestRobots","searchField","onSearchChange","isPending","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kUAGaA,EAAO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAC1B,OACI,yBAAKC,UAAU,iDAEX,yBAAKC,IAAG,gCAA2BJ,GAAMK,IAAI,gBAE9C,6BACC,yBAAKF,UAAU,WACX,4BAAKF,GACL,2BAAIC,OCRPI,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACzB,OACE,6BACGA,EAAaC,KAAI,SAACC,EAAMC,GACvB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIO,EAAaG,GAAGV,GACpBC,KAAMM,EAAaG,GAAGT,KACtBC,MAAOK,EAAaG,GAAGR,aCXtBU,EAAa,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,aAA8B,EAAjBC,YACrC,OACI,yBAAKX,UAAU,OACX,2BAAOY,IAAI,SAASZ,UAAU,cAA9B,UACD,2BAAOH,GAAG,SAASgB,KAAK,SAASb,UAAU,mCAAmCc,YAAY,yBAA0BC,SAAUL,MCS1HM,EAZE,WACb,OACI,yBAAKhB,UAAU,WAMjB,wBAAIA,UAAU,WAAd,gBCcAiB,G,wLAEFC,KAAKC,MAAMC,oB,+BAEH,IAAD,EAC0DF,KAAKC,MAA9DE,EADD,EACCA,YAAaC,EADd,EACcA,eAAgBlB,EAD9B,EAC8BA,aACrC,OAFO,EAC4CmB,UAKjD,yBAAKvB,UAAU,MACb,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAYU,aAAcY,IAE1B,kBAAC,EAAD,CACElB,aAAcA,EAAaoB,QAAO,SAACC,GACjC,OAAOA,EAAM3B,KAAK4B,cAAcC,SAASN,EAAYK,qBAR3D,kBAAC,EAAD,U,GARYE,cAuBHC,eAvCS,SAACC,GACvB,MAAO,CACLT,YAAaS,EAAMC,aAAaV,YAChCjB,aAAc0B,EAAME,cAAc5B,aAClCmB,UAAWO,EAAME,cAAcT,UAC/BU,MAAOH,EAAME,cAAcC,UAIJ,SAACC,GAC1B,MAAO,CACLZ,eAAgB,SAACa,GAAD,OAAWD,ECbU,CACvCrB,KCRiC,sBDSjCuB,QDWqDD,EAAME,OAAOC,SAChElB,gBAAiB,kBAAMc,GCTQ,SAACA,GAClCA,EAAS,CACPrB,KCbkC,2BDepC0B,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUT,EAAS,CAAErB,KChBO,yBDgBuBuB,QAASO,OACjEC,OAAM,SAACX,GAAD,OACLC,EAAS,CAAErB,KCjBoB,wBDiBSuB,QAASH,cD4BxCJ,CAA6CZ,GGpCtD4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfwB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bb,OAAM,SAAAX,GACL8B,QAAQ9B,MAAM,4CAA6CA,M,WCzF3DkC,EAAqB,CACzB9C,YAAa,IAYT+C,EAAqB,CACzB7C,WAAW,EACXnB,aAAc,ICXViE,EAASC,yBAETC,EAAcC,YAAgB,CAACzC,aDFT,WAA8C,IAA7CD,EAA4C,uDAApCqC,EAAoBM,EAAgB,uDAAP,GAChE,OAAQA,EAAO5D,MACb,IFb+B,sBEc7B,OAAO,2BAAKiB,GAAZ,IAAmBT,YAAaoD,EAAOrC,UACzC,QACE,OAAON,ICHsCE,cDatB,WAA8C,IAA7CF,EAA4C,uDAApCsC,EAAoBK,EAAgB,uDAAP,GACjE,OAAQA,EAAO5D,MACb,IF3BkC,yBE4BhC,OAAO,2BAAKiB,GAAZ,IAAmBP,WAAW,IAChC,IF5BkC,yBE6BhC,OAAO,2BAAKO,GAAZ,IAAmB1B,aAAcqE,EAAOrC,QAASb,WAAW,IAC9D,IF7BiC,wBE8B/B,OAAO,2BAAKO,GAAZ,IAAmBG,MAAOwC,EAAOrC,QAASb,WAAW,IACvD,QACE,OAAOO,MCrBP4C,EAAQC,YAAYJ,EAAYK,YAAgBC,IAAgBR,IAEtES,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SFAnB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,cAAwBrC,OAAOC,SAASqC,MACpDC,SAAWvC,OAAOC,SAASsC,OAIvC,OAGFvC,OAAOwC,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMgC,cAAN,sBAEPvC,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5BhD,MAAK,SAAAC,GAEJ,IAAMgD,EAAchD,EAAS+C,QAAQE,IAAI,gBAEnB,MAApBjD,EAASkD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMrD,MAAK,SAAAiB,GACjCA,EAAaqC,aAAatD,MAAK,WAC7BO,OAAOC,SAAS+C,eAKpB5C,EAAgBC,EAAOC,MAG1BT,OAAM,WACLmB,QAAQC,IACN,oEAvFAgC,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMrD,MAAK,WACjCuB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OEtB/BE,K","file":"static/js/main.e6c51ea0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport const Card = ({id,name,email}) => {\r\n    return (\r\n        <div className='tc grow bg-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n            \r\n            <img src={`https://robohash.org/ ${id}`} alt=\"RandomRobot\" />\r\n            \r\n           <div>\r\n            <div className='contact' >\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Card } from \"./Card\";\r\n\r\n\r\nexport const CardList = ({ robotFriends }) => {\r\n  return (\r\n    <div>\r\n      {robotFriends.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robotFriends[i].id}\r\n            name={robotFriends[i].name}\r\n            email={robotFriends[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react'\r\n\r\nexport const FilterBots = ({searchChange,searchfield}) => {\r\n    return (\r\n        <div className='pa2' >\r\n            <label for='filter' className=\"filterBots\" >Search</label>\r\n           <input id=\"filter\" type=\"search\" className='pa3 ba b--green bg-lightest-blue' placeholder='looking for friends..?'  onChange={searchChange} /> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n// import spinner from './spinner.svg'\r\n\r\n const Loading = () => {\r\n    return (\r\n        <div className='spinner'>\r\n            {/* <img\r\n        src={spinner}\r\n        style={{ width: '800px', margin: 'auto', display: 'block' }}\r\n        alt=\"Loading...\"\r\n      /> */}\r\n      <h2 className='loading'>Loading...</h2>\r\n        </div>\r\n    )\r\n}\r\nexport default Loading;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CardList } from \"../components/CardList\";\nimport { FilterBots } from \"../components/FilterBots\";\nimport Loading from \"../components/Loading\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robotFriends: state.requestRobots.robotFriends,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()) //action\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  render() {\n    const { searchField, onSearchChange, robotFriends, isPending } = this.props;\n    return !isPending ? \n     (\n      <Loading />\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">botFriends</h1>\n        <FilterBots searchChange={onSearchChange} />\n\n        <CardList\n          robotFriends={robotFriends.filter((robot) => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n          })}\n        />\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({\r\n    type: REQUEST_ROBOTS_PENDING,\r\n  });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: true,\r\n  robotFriends: [],\r\n  \r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robotFriends: action.payload, isPending: true };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk'\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}